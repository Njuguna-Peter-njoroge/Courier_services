generator client {
      provider = "prisma-client-js"
}

datasource db {
      provider = "postgresql" // or "mysql" or "sqlite"
      url      = env("DATABASE_URL")
}

enum UserRole {
      ADMIN
      USER
      COURIER
}

enum OrderStatus {
      PENDING
      CONFIRMED
      PICKED_UP
      IN_TRANSIT
      OUT_FOR_DELIVERY
      DELIVERED
      CANCELLED
}

enum Priority {
      NORMAL
      URGENT
}

enum VehicleType {
      BICYCLE
      MOTORCYCLE
      CAR
      VAN
      TRUCK
}

enum GoodType {
      FOOD
      ELECTRONICS
      DOCUMENTS
      CLOTHING
      OTHER
}

model User {
      id            String       @id @default(uuid())
      name          String
      email         String       @unique
      password      String
      role          UserRole
      isVerified    Boolean      @default(false)
      createdAt     DateTime     @default(now())
      updatedAt     DateTime     @updatedAt
      phone         String?
      location      String?
      licenseNumber String? // for couriers
      vehicleType   VehicleType?
      isAvailable   Boolean? // for couriers
      orders        Order[]      @relation("UserOrders")
      parcels       Parcel[]     @relation("UserParcels")
}

model Order {
      id                String          @id @default(uuid())
      orderId           String          @unique
      customer          User            @relation("UserOrders", fields: [customerId], references: [id])
      customerId        String
      pickupAddress     String
      deliveryAddress   String
      courierService    String
      status            OrderStatus
      createdAt         DateTime        @default(now())
      updatedAt         DateTime        @updatedAt
      packageWeight     String
      packageDimensions String
      price             String
      notes             String?
      StatusHistory     StatusHistory[]
}

model Parcel {
      id                String          @id @default(uuid())
      trackingNumber    String          @unique
      goodType          GoodType
      goodDescription   String
      goodWeight        Int
      status            OrderStatus
      sender            User            @relation("UserParcels", fields: [senderId], references: [id])
      senderId          String
      recipientName     String
      recipientEmail    String
      recipientPhone    String
      recipientAddress  String
      deliveryDetails   String?
      weight            Float?
      dimensions        String?
      description       String?
      priority          Priority?
      estimatedDelivery DateTime?
      actualDelivery    DateTime?
      cost              Float?
      createdAt         DateTime        @default(now())
      updatedAt         DateTime        @updatedAt
      StatusHistory     StatusHistory[]
}

model StatusHistory {
      id        String      @id @default(uuid())
      order     Order?      @relation(fields: [orderId], references: [id])
      orderId   String?
      parcel    Parcel?     @relation(fields: [parcelId], references: [id])
      parcelId  String?
      status    OrderStatus
      timestamp DateTime    @default(now())
      updatedBy String
      reason    String?
      notes     String?
}
