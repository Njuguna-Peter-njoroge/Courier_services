generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  COURIER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum Priority {
  NORMAL
  URGENT
}

enum VehicleType {
  BICYCLE
  MOTORCYCLE
  CAR
  VAN
  TRUCK
}

enum GoodType {
  FOOD
  ELECTRONICS
  DOCUMENTS
  CLOTHING
  OTHER
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  status        AccountStatus @default(ACTIVE)
  role          UserRole      @default(USER)
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  phone         String?
  location      String?
  licenseNumber String?
  vehicleType   VehicleType?
  isAvailable   Boolean?
  orders        Order[]       @relation("UserOrders")
  parcels       Parcel[]      @relation("UserParcels")
}

model Order {
  id                String          @id @default(uuid())
  orderId           String          @unique
  customer          User            @relation("UserOrders", fields: [customerId], references: [id])
  customerId        String
  pickupAddress     String
  deliveryAddress   String
  courierService    String
  status            OrderStatus
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  packageWeight     String
  packageDimensions String
  price             String
  notes             String?
  statusHistory     StatusHistory[] @relation("OrderStatusHistory")
}

model Parcel {
  id                String          @id @default(uuid())
  trackingNumber    String          @unique
  goodType          GoodType
  goodDescription   String
  goodWeight        Int
  status            OrderStatus
  sender            User            @relation("UserParcels", fields: [senderId], references: [id])
  senderId          String
  recipientName     String
  recipientEmail    String
  recipientPhone    String
  recipientAddress  String
  deliveryDetails   String?
  weight            Float?
  dimensions        String?
  description       String?
  priority          Priority?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  cost              Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  statusHistory     StatusHistory[] @relation("ParcelStatusHistory")
}

model StatusHistory {
  id        String      @id @default(uuid())
  order     Order?      @relation("OrderStatusHistory", fields: [orderId], references: [id])
  orderId   String?
  parcel    Parcel?     @relation("ParcelStatusHistory", fields: [parcelId], references: [id])
  parcelId  String?
  status    OrderStatus
  timestamp DateTime    @default(now())
  updatedBy String
  reason    String?
  notes     String?
}

enum AccountStatus {
  ACTIVE
  PENDING
  BANNED
}
